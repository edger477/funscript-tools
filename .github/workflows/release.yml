name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

env:
  PYTHON_VERSION: '3.10'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build Windows executable
      run: python build_windows.py

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: dist/*.zip

  build-linux:
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow this job to fail without stopping the workflow
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk fuse

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build Linux AppImage
      run: python build_linux.py

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      if: success()  # Only upload if build succeeded
      with:
        name: linux-build
        path: dist/*.tar.gz

  create-release:
    needs: [build-windows, build-linux]
    if: always() && startsWith(github.ref, 'refs/tags/')  # Run even if Linux build fails, but only on tags
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build
        path: ./artifacts/windows/

    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      continue-on-error: true  # Don't fail if Linux artifacts don't exist
      with:
        name: linux-build
        path: ./artifacts/linux/

    - name: Check available artifacts
      id: check_artifacts
      run: |
        echo "WINDOWS_FILES=$(find ./artifacts/windows -name '*.zip' 2>/dev/null | tr '\n' ' ' || echo '')" >> $GITHUB_OUTPUT
        echo "LINUX_FILES=$(find ./artifacts/linux -name '*.tar.gz' 2>/dev/null | tr '\n' ' ' || echo '')" >> $GITHUB_OUTPUT
        # Create dynamic release body based on available platforms
        if [ -n "$(find ./artifacts/linux -name '*.tar.gz' 2>/dev/null)" ]; then
          echo "PLATFORMS=Windows and Linux" >> $GITHUB_OUTPUT
          echo "LINUX_DOWNLOAD=- **Linux**: Download the \`.tar.gz\` file, extract, make executable, and run the \`.AppImage\`" >> $GITHUB_OUTPUT
        else
          echo "PLATFORMS=Windows only" >> $GITHUB_OUTPUT
          echo "LINUX_DOWNLOAD=- **Linux**: Linux build currently unavailable" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Restim Funscript Processor ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## Restim Funscript Processor ${{ steps.get_version.outputs.VERSION }}

          ### Features
          - **Windows**: Single executable file - no Python installation required
          - **Linux**: AppImage - portable application that runs on most distributions
          - **Auto-generation**: Creates alpha/beta files from main funscript when missing
          - **30+ Parameters**: Comprehensive control over processing with intuitive UI
          - **Real-time Feedback**: Progress tracking and percentage displays for ratio controls

          ### Downloads (${{ steps.check_artifacts.outputs.PLATFORMS }})
          - **Windows**: Download the `.zip` file, extract, and run `RestimFunscriptProcessor.exe`
          ${{ steps.check_artifacts.outputs.LINUX_DOWNLOAD }}

          ### Generated Output Files
          The application processes a single input funscript and generates 10 output files:
          1. `alpha.funscript` - Alpha channel data
          2. `alpha-prostate.funscript` - Inverted alpha for prostate stimulation
          3. `beta.funscript` - Beta channel data
          4. `frequency.funscript` - Combined ramp/speed frequency
          5. `pulse_frequency.funscript` - Alpha-based pulse frequency
          6. `pulse_rise_time.funscript` - Composite timing signal
          7. `pulse_width.funscript` - Limited alpha-based width
          8. `volume.funscript` - Standard volume control
          9. `volume-prostate.funscript` - Enhanced volume for prostate
          10. `volume-stereostim.funscript` - Mapped volume range

          ### Installation
          See the included `INSTALLATION.txt` file in each download for detailed instructions.

          ### Support
          - Report issues: [GitHub Issues](https://github.com/${{ github.repository }}/issues)
          - Documentation: See included README.md files
        files: |
          ./artifacts/windows/*.zip
          ./artifacts/linux/*.tar.gz
        draft: false
        prerelease: false